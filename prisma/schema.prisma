// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Role {
  id   String @id @default(uuid())
  name String
  User User[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  email            String   @unique
  username         String   @unique
  password         String
  currentlyPlaying String?

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  followedBy               Follows[]                  @relation("following")
  following                Follows[]                  @relation("follower")
  post                     Post[]
  commnet                  Comment[]
  like                     Like[]
  conversationParticipants ConversationParticipants[]
  message                  Message[]
  Session                  Session[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  Comment   Comment[]
}

model Comment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  Like      Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  commentId String

  @@id([userId, commentId])
}

model Game {
  id         String @id @default(uuid())
  name       String
  coverImage String
  genre      Genre  @relation(fields: [genreId], references: [id])
  genreId    String
}

model Genre {
  id   String @id @default(uuid())
  name String
  game Game[]
}

model Conversation {
  id           String                     @id @default(uuid())
  participants ConversationParticipants[]
  messages     Message[]
}

model ConversationParticipants {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  body           String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
